version: '3'

vars:
  BINARY_NAME: sysdig-vuls
  BUILD_DIR: bin
  MAIN_PATH: cmd/sysdig-vuls/main.go
  COVERAGE_FILE: coverage.out
  COVERAGE_HTML: coverage.html

tasks:
  default:
    desc: デフォルトタスク - ヘルプを表示
    cmds:
      - task --list

  build:
    desc: バイナリをビルド（現在のプラットフォーム向け）
    cmds:
      - mkdir -p {{.BUILD_DIR}}
      - CGO_ENABLED=1 go build -o {{.BUILD_DIR}}/{{.BINARY_NAME}} {{.MAIN_PATH}}
    sources:
      - '**/*.go'
      - go.mod
      - go.sum
    generates:
      - '{{.BUILD_DIR}}/{{.BINARY_NAME}}'

  build-all:
    desc: 複数プラットフォーム向けにビルド
    deps: [clean]
    cmds:
      - mkdir -p {{.BUILD_DIR}}
      - task: build-linux-arm64
      - task: build-darwin-arm64

  build-linux-arm64:
    desc: Linux ARM64向けビルド
    cmds:
      - CGO_ENABLED=1 GOOS=linux GOARCH=arm64 go build -o {{.BUILD_DIR}}/{{.BINARY_NAME}}-linux-arm64 {{.MAIN_PATH}}

  build-darwin-arm64:
    desc: macOS ARM64向けビルド
    cmds:
      - CGO_ENABLED=1 GOOS=darwin GOARCH=arm64 go build -o {{.BUILD_DIR}}/{{.BINARY_NAME}}-darwin-arm64 {{.MAIN_PATH}}


  clean:
    desc: ビルド成果物をクリーン
    cmds:
      - go clean
      - rm -rf {{.BUILD_DIR}}
      - rm -f {{.COVERAGE_FILE}} {{.COVERAGE_HTML}}

  test:
    desc: テストを実行
    cmds:
      - go test -v ./...

  test-coverage:
    desc: カバレッジ付きでテストを実行
    cmds:
      - go test -v -coverprofile={{.COVERAGE_FILE}} ./...
      - go tool cover -html={{.COVERAGE_FILE}} -o {{.COVERAGE_HTML}}
      - 'echo "カバレッジレポート: {{.COVERAGE_HTML}}"'

  test-race:
    desc: レース条件検出付きでテストを実行
    cmds:
      - go test -race -v ./...

  test-short:
    desc: 短時間テストのみ実行
    cmds:
      - go test -short -v ./...

  bench:
    desc: ベンチマークテストを実行
    cmds:
      - go test -bench=. -benchmem ./...

  lint:
    desc: コードのリント実行
    cmds:
      - golangci-lint run ./...

  lint-fix:
    desc: 自動修正可能なリント問題を修正
    cmds:
      - golangci-lint run --fix ./...

  fmt:
    desc: コードフォーマット
    cmds:
      - go fmt ./...
      - gofmt -s -w .

  vet:
    desc: go vetを実行
    cmds:
      - go vet ./...

  staticcheck:
    desc: staticcheckを実行
    cmds:
      - staticcheck ./...

  check:
    desc: すべての品質チェックを実行
    deps: [fmt, vet, staticcheck, lint, test]

  deps:
    desc: 依存関係を管理
    cmds:
      - go mod download
      - go mod tidy
      - go mod verify

  deps-update:
    desc: 依存関係を更新
    cmds:
      - go get -u ./...
      - go mod tidy

  deps-graph:
    desc: 依存関係グラフを表示
    cmds:
      - go mod graph

  install:
    desc: バイナリをシステムにインストール
    deps: [build]
    cmds:
      - cp {{.BUILD_DIR}}/{{.BINARY_NAME}} /usr/local/bin/

  uninstall:
    desc: システムからバイナリをアンインストール
    cmds:
      - rm -f /usr/local/bin/{{.BINARY_NAME}}

  run:
    desc: アプリケーションをビルドして実行
    deps: [build]
    cmds:
      - ./{{.BUILD_DIR}}/{{.BINARY_NAME}}

  run-list:
    desc: 脆弱性リストを取得して実行
    deps: [build]
    env:
      SYSDIG_API_TOKEN: '{{.SYSDIG_API_TOKEN}}'
      SYSDIG_API_URL: '{{.SYSDIG_API_URL | default "https://us2.app.sysdig.com"}}'
    cmds:
      - ./{{.BUILD_DIR}}/{{.BINARY_NAME}} -command list

  run-debug:
    desc: デバッグモードで実行
    deps: [build]
    cmds:
      - dlv exec {{.BUILD_DIR}}/{{.BINARY_NAME}} -- {{.CLI_ARGS}}

  docker-build:
    desc: Dockerイメージをビルド
    cmds:
      - docker build -t {{.BINARY_NAME}}:latest .

  docker-run:
    desc: Dockerコンテナで実行
    cmds:
      - docker run --rm -e SYSDIG_API_TOKEN -e SYSDIG_API_URL {{.BINARY_NAME}}:latest

  release:
    desc: リリース用ビルド（全プラットフォーム）
    deps: [clean, test, lint]
    cmds:
      - task: build-all
      - 'echo "リリースビルド完了: {{.BUILD_DIR}}/"'
      - ls -lh {{.BUILD_DIR}}/

  version:
    desc: Goバージョン情報を表示
    cmds:
      - go version
      - 'echo "go.mod required version:"'
      - grep "^go " go.mod

  docs:
    desc: ドキュメント生成
    cmds:
      - mkdir -p docs
      - go doc -all ./pkg/sysdig > docs/api-sysdig.txt
      - go doc -all ./pkg/config > docs/api-config.txt
      - 'echo "APIドキュメントを生成しました: docs/"'

  ci:
    desc: CI環境で実行するタスク
    cmds:
      - task: deps
      - task: check
      - task: build-all

  pre-commit:
    desc: コミット前のチェック
    cmds:
      - task: fmt
      - task: lint
      - task: test-short
      - git diff --exit-code

  dev-watch:
    desc: ファイル変更を監視して自動ビルド（要fswatch）
    cmds:
      - echo "開発モード開始... (Ctrl+Cで終了)"
      - while true; do task build && echo "ファイル変更を監視中..." && fswatch -1 -r --exclude '{{.BUILD_DIR}}' --exclude '.git' . || break; done

  mod-why:
    desc: 特定のモジュールがなぜ必要かを表示
    cmds:
      - go mod why {{.MODULE}}
    vars:
      MODULE: '{{.MODULE | default "github.com/stretchr/testify"}}'

  todo:
    desc: TODO/FIXMEコメントを検索
    cmds:
      - grep -r "TODO\|FIXME" --include="*.go" .

  sec-check:
    desc: セキュリティチェック（要gosec）
    cmds:
      - gosec ./...

  imports:
    desc: importを整理（要goimports）
    cmds:
      - goimports -w .

  complexity:
    desc: 循環的複雑度をチェック（要gocyclo）
    cmds:
      - gocyclo -over 15 .

  list-outdated:
    desc: 古い依存関係をリスト
    cmds:
      - go list -u -m all

  tidy:
    desc: go.modをクリーンアップ
    cmds:
      - go mod tidy -v

  download:
    desc: 依存関係をダウンロード
    cmds:
      - go mod download -x

  vendor:
    desc: vendorディレクトリを作成
    cmds:
      - go mod vendor

  clean-vendor:
    desc: vendorディレクトリを削除
    cmds:
      - rm -rf vendor/

  gen:
    desc: go generateを実行
    cmds:
      - go generate ./...

  test-pkg:
    desc: 特定パッケージのテスト
    cmds:
      - go test -v ./{{.PKG}}/...
    vars:
      PKG: '{{.PKG | default "pkg/sysdig"}}'